{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StyledBadge","withStyles","theme","badge","backgroundColor","color","boxShadow","palette","background","paper","position","top","left","width","height","borderRadius","animation","border","content","transform","opacity","Badge","Champion","name","onclick","nameDense","replace","toLowerCase","imgLink","Box","p","overlap","anchorOrigin","vertical","horizontal","variant","Avatar","alt","src","onClick","App","props","state","champs","console","log","axios","get","then","response","request","status","setState","data","sort","a","b","cost","champ","className","map","index","flexWrap","display","flexDirection","m","key","filter","i","onChampClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wUAQMA,EAAcC,aAAW,SAACC,GAAD,MAAY,CAC1CC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,UACPC,UAAU,aAAD,OAAeJ,EAAMK,QAAQC,WAAWC,OACjD,WAAY,CACbC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGV,oBAAqB,CACnB,KAAM,CACPC,UAAW,YACXC,QAAS,GAER,OAAQ,CACTD,UAAW,aACXC,QAAS,OAxBSnB,CA2BdoB,KAEN,SAASC,EAAT,GAAsC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACnBC,EAAYF,EAAKG,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,cACnDC,EAAO,4BAAwBH,EAAxB,QACb,OAAO,kBAACI,EAAA,EAAD,CAAKC,EAAG,IACd,kBAAC9B,EAAD,CACM+B,QAAQ,SACRC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,QAAQ,OAEZ,kBAACC,EAAA,EAAD,CAAQC,IAAKd,EAAMe,IAAKV,EAASW,QAASf,M,IA0C/BgB,E,kDApCb,WAAYC,GAAQ,IAAD,8BACpB,cAAMA,IACDC,MAAQ,CAAEC,OAAQ,IAFH,E,gEAIE,IAAD,OACnBC,QAAQC,IAAI,UACZC,IAAMC,IAAI,0BACTC,MAAK,SAACC,GAC0B,MAA5BA,EAASC,QAAQC,QACpB,EAAKC,SAAU,CAAET,OAAQ,YAAIM,EAASI,MAAMC,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAEE,KAAOD,EAAEC,e,mCAK1DC,GAEdd,QAAQC,IAAR,UAAea,EAAMnC,KAArB,e,+BAGW,IAAD,OACR,OACD,yBAAKoC,UAAU,OACd,+DACC,CAAC,EAAE,EAAE,EAAE,EAAE,GAAGC,KAAI,SAACH,EAAMI,GACxB,OAAO,kBAAChC,EAAA,EAAD,CAAKiC,SAAS,SAASC,QAAQ,OAAOC,cAAc,MAAMlC,EAAG,GAAKmC,EAAG,GAAKC,IAAKL,GACrF,EAAKnB,MAAMC,OAAOwB,QAAO,SAACT,GAAD,OAAWA,EAAMD,OAASA,KAAMG,KAAI,SAACF,EAAOU,GACrE,OAAQ,kBAAC9C,EAAD,CAAUE,QAAS,kBAAM,EAAK6C,aAAaX,IAAQnC,KAAMmC,EAAMnC,KAAM2C,IAAKE,gB,GA3BpEE,IAAMC,WC1CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.456f4d08.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Box from '@material-ui/core/Box';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n\tbadge: {\r\n\t  backgroundColor: '#44b700',\r\n\t  color: '#44b700',\r\n\t  boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n\t  '&::after': {\r\n\t\tposition: 'absolute',\r\n\t\ttop: 0,\r\n\t\tleft: 0,\r\n\t\twidth: '100%',\r\n\t\theight: '100%',\r\n\t\tborderRadius: '50%',\r\n\t\tanimation: '$ripple 1.2s infinite ease-in-out',\r\n\t\tborder: '1px solid currentColor',\r\n\t\tcontent: '\"\"',\r\n\t  },\r\n\t},\r\n\t'@keyframes ripple': {\r\n\t  '0%': {\r\n\t\ttransform: 'scale(.8)',\r\n\t\topacity: 1,\r\n\t  },\r\n\t  '100%': {\r\n\t\ttransform: 'scale(2.4)',\r\n\t\topacity: 0,\r\n\t  },\r\n\t},\r\n  }))(Badge);\r\n\r\nfunction Champion({ name, onclick }) {\r\n\tconst nameDense = name.replace(' ', '').replace(\"'\", '').toLowerCase();\r\n\tconst imgLink = `dataset/champions/${nameDense}.png`;\r\n\treturn <Box p={0.5}>\r\n\t\t<StyledBadge\r\n        overlap=\"circle\"\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right',\r\n        }}\r\n        variant=\"dot\"\r\n      >\r\n\t\t  <Avatar alt={name} src={imgLink} onClick={onclick} />\r\n\t\t  </StyledBadge>\r\n\t\t  </Box>;\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n\tsuper(props);\r\n\tthis.state = { champs: [], };\r\n  }\r\n  componentDidMount() {\r\n\t  console.log('loaded');\r\n\t  axios.get('dataset/champions.json')\r\n\t  .then((response) => {\r\n\t\t  if (response.request.status === 200) {\r\n\t\t\t  this.setState( { champs: [...response.data].sort((a,b)=> a.cost - b.cost) } );\r\n\t\t  }\r\n\t  });\r\n  }\r\n\r\n  onChampClick(champ) {\r\n\r\n\tconsole.log(`${champ.name} clicked`);\r\n  }\r\n\r\n  render() {\r\n\t  return (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h3>챔피언 목록</h3>\r\n\t\t\t{[1,2,3,4,5].map((cost, index) => {\r\n\t\t\treturn\t<Box flexWrap=\"nowrap\" display=\"flex\" flexDirection=\"row\" p={0.5} m={0.5} key={index}>\r\n\t\t\t{this.state.champs.filter((champ) => champ.cost === cost).map((champ, i) => {\r\n\t\t\t\treturn (<Champion onclick={() => this.onChampClick(champ)} name={champ.name} key={i} />);\r\n\t\t\t})}\r\n\t\t\t</Box>\r\n\t\t\t})\r\n\t\t}\r\n\t  </div>\r\n\t  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}