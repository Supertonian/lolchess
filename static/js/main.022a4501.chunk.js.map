{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["StyledBadge","withStyles","theme","badge","backgroundColor","color","boxShadow","palette","background","paper","position","top","left","width","height","borderRadius","animation","border","content","transform","opacity","Badge","Champion","champ","onclick","nameDense","name","replace","toLowerCase","imgLink","Box","p","overlap","anchorOrigin","vertical","horizontal","variant","selected","Avatar","alt","src","onClick","App","props","state","champs","axios","get","then","response","request","status","setState","data","sort","a","b","cost","newChamp","this","forEach","c","className","map","index","flexWrap","display","flexDirection","m","key","filter","i","onChampClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wUAQMA,EAAcC,aAAW,SAACC,GAAD,MAAY,CACzCC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,UACPC,UAAU,aAAD,OAAeJ,EAAMK,QAAQC,WAAWC,OACjD,WAAY,CACVC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,UAAW,oCACXC,OAAQ,yBACRC,QAAS,OAGb,oBAAqB,CACnB,KAAM,CACJC,UAAW,YACXC,QAAS,GAEX,OAAQ,CACND,UAAW,aACXC,QAAS,OAxBKnB,CA2BhBoB,KAEJ,SAASC,EAAT,GAAuC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACnBC,EAAYF,EAAMG,KAAKC,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,cACzDC,EAAO,4BAAwBJ,EAAxB,QACb,OACE,kBAACK,EAAA,EAAD,CAAKC,EAAG,IACN,kBAAC/B,EAAD,CACEgC,QAAQ,SACRC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,QAASb,EAAMc,SAAW,MAAQ,YAElC,kBAACC,EAAA,EAAD,CAAQC,IAAKhB,EAAMG,KAAMc,IAAKX,EAASY,QAASjB,M,IAgEzCkB,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,OAAQ,IAFN,E,gEAIE,IAAD,OAClBC,IAAMC,IAAI,0BAA0BC,MAAK,SAACC,GACR,MAA5BA,EAASC,QAAQC,QACnB,EAAKC,SAAS,CACZP,OAAQ,YAAII,EAASI,MAAMC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAOD,EAAEC,e,mCAMhDlC,GACX,IAAMmC,EAAQ,YAAOC,KAAKf,MAAMC,QAChCa,EAASE,SAAQ,SAACC,GACZA,EAAEnC,OAASH,EAAMG,OACnBmC,EAAExB,UAAYwB,EAAExB,aAGpBsB,KAAKP,SAAS,CAAEP,OAAQa,M,+BAGhB,IAAD,OACP,OACE,yBAAKI,UAAU,OACb,+DACC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAI,SAACN,EAAMO,GAC1B,OACE,kBAAClC,EAAA,EAAD,CACEmC,SAAS,SACTC,QAAQ,OACRC,cAAc,MACdpC,EAAG,GACHqC,EAAG,GACHC,IAAKL,GAEJ,EAAKpB,MAAMC,OACTyB,QAAO,SAAC/C,GAAD,OAAWA,EAAMkC,OAASA,KACjCM,KAAI,SAACxC,EAAOgD,GACX,OACE,kBAACjD,EAAD,CACEE,QAAS,kBAAM,EAAKgD,aAAajD,IACjCA,MAAOA,EACP8C,IAAKE,gB,GA9CTE,IAAMC,WC5CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.022a4501.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    backgroundColor: \"#44b700\",\r\n    color: \"#44b700\",\r\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n    \"&::after\": {\r\n      position: \"absolute\",\r\n      top: 0,\r\n      left: 0,\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      borderRadius: \"50%\",\r\n      animation: \"$ripple 1.2s infinite ease-in-out\",\r\n      border: \"1px solid currentColor\",\r\n      content: '\"\"',\r\n    },\r\n  },\r\n  \"@keyframes ripple\": {\r\n    \"0%\": {\r\n      transform: \"scale(.8)\",\r\n      opacity: 1,\r\n    },\r\n    \"100%\": {\r\n      transform: \"scale(2.4)\",\r\n      opacity: 0,\r\n    },\r\n  },\r\n}))(Badge);\r\n\r\nfunction Champion({ champ, onclick }) {\r\n  const nameDense = champ.name.replace(\" \", \"\").replace(\"'\", \"\").toLowerCase();\r\n  const imgLink = `dataset/champions/${nameDense}.png`;\r\n  return (\r\n    <Box p={0.5}>\r\n      <StyledBadge\r\n        overlap=\"circle\"\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\",\r\n        }}\r\n        variant={champ.selected ? \"dot\" : \"standard\"}\r\n      >\r\n        <Avatar alt={champ.name} src={imgLink} onClick={onclick} />\r\n      </StyledBadge>\r\n    </Box>\r\n  );\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { champs: [] };\r\n  }\r\n  componentDidMount() {\r\n    axios.get(\"dataset/champions.json\").then((response) => {\r\n      if (response.request.status === 200) {\r\n        this.setState({\r\n          champs: [...response.data].sort((a, b) => a.cost - b.cost),\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  onChampClick(champ) {\r\n    const newChamp = [...this.state.champs];\r\n    newChamp.forEach((c) => {\r\n      if (c.name === champ.name) {\r\n        c.selected = !c.selected;\r\n      }\r\n    });\r\n    this.setState({ champs: newChamp });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h3>챔피언 목록</h3>\r\n        {[1, 2, 3, 4, 5].map((cost, index) => {\r\n          return (\r\n            <Box\r\n              flexWrap=\"nowrap\"\r\n              display=\"flex\"\r\n              flexDirection=\"row\"\r\n              p={0.5}\r\n              m={0.5}\r\n              key={index}\r\n            >\r\n              {this.state.champs\r\n                .filter((champ) => champ.cost === cost)\r\n                .map((champ, i) => {\r\n                  return (\r\n                    <Champion\r\n                      onclick={() => this.onChampClick(champ)}\r\n                      champ={champ}\r\n                      key={i}\r\n                    />\r\n                  );\r\n                })}\r\n            </Box>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}